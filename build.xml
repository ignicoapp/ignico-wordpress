<?xml version="1.0" encoding="UTF-8"?>

<project name="Ignico" default="build">

	<property name="plugin"  value="ignico" override="true" />
	<property name="repository"  value="https://github.com/ignicoapp/ignico-wordpress" override="true" />

	<!-- ============================================  -->
	<!-- Target: dotenv                                -->
	<!-- ============================================  -->
	<target name="dotenv" description="Load environmental variables from system and .env file.">
		<echo msg="Load environmental variables" />

		<!-- Loads properties from the environment with the specified value as prefix. -->
		<property environment="env" override="true" />

		<!-- Loads properties from the .env file if exits. -->
		<property file=".env" prefix="env" />

		<resolvepath propertyName="env.WP_PATH" file="${env.WP_PATH}"/>
	</target>

	<!-- ============================================  -->
	<!-- Target: setup:symlink                         -->
	<!-- ============================================  -->
	<target name="setup:symlink" description="Symlink proper directories.">

		<echo msg="Symlink proper directories" />

		<!-- ============================================  -->
		<!-- Symlink plugin itself to wp plugins dir       -->
		<!-- ============================================  -->
		<symlink target="./../../../" link="./wordpress/wp-content/plugins/${plugin}"  overwrite="true" />
	</target>

	<!-- ============================================  -->
	<!-- Target: setup:githook                         -->
	<!-- ============================================  -->
	<target name="setup:githook" description="Create git pre-commit hook to execute inspect task before commit.">
		<echo msg="Create pre-commit githook" />

		<exec command="mkdir -p .git/hooks; touch .git/hooks/pre-commit; echo '' > .git/hooks/pre-commit; echo '#!/bin/sh' >> .git/hooks/pre-commit; echo './vendor/bin/phing inspect' >> .git/hooks/pre-commit; chmod +x .git/hooks/pre-commit;"/>
	</target>

	<!-- ============================================  -->
	<!-- Target: setup                                 -->
	<!-- ============================================  -->
	<target name="setup" description="Setup project. Execute setup:symlink, setup:githook.">
	  <echo msg="Setup project" />

	  <phingcall target="setup:symlink" />
	  <phingcall target="setup:githook" />
	</target>

	<!-- ============================================  -->
	<!-- Target: wp:db:create                          -->
	<!-- ============================================  -->
	<target name="wp:db:create" depends="dotenv" description="Create WordPress database.">
		<echo msg="Create WordPress database" />

		<exec command="./vendor/bin/wp db create --path=${env.WP_PATH} --allow-root" passthru="true" checkreturn="false" />
	</target>

	<!-- ============================================  -->
	<!-- Target: wpremovedatabase                      -->
	<!-- ============================================  -->
	<target name="wp:db:drop" depends="dotenv" description="Drop WordPress database.">
		<echo msg="Drop WordPress database" />

		<exec command="./vendor/bin/wp db drop --yes --path=${env.WP_PATH} --allow-root" passthru="true" checkreturn="false" />
	</target>

	<!-- ============================================  -->
	<!-- Target: wp:download						   -->
	<!-- ============================================  -->
	<target name="wp:download" depends="dotenv" description="Download WordPress.">
		<echo msg="Download WordPress ${env.WP_VERSION}" />

		<!-- Enviroment variables are loaded by dotenv target -->
		<exec command="./vendor/bin/wp core download --version=${env.WP_VERSION} --path=${env.WP_PATH} --locale=${env.WP_LOCALE} --skip-content --allow-root --force" passthru="true" />

		<!-- Create required directories -->
		<echo msg="Create required directories" />
		<exec command="mkdir -p ${env.WP_PATH}/wp-content/plugins; mkdir -p ${env.WP_PATH}/wp-content/themes"/>
	</target>

	<!-- ============================================  -->
	<!-- Target: wpconfig                              -->
	<!-- ============================================  -->
	<target name="wp:config" depends="dotenv" description="Generate WordPress wp-config.php.">
		<echo msg="Generate WordPress wp-config.php" />

		<!-- Enviroment variables are loaded by dotenv target -->
		<exec command="./vendor/bin/wp core config --dbname=${env.WP_CONFIG_DB_NAME} --dbuser=${env.WP_CONFIG_DB_USER} --dbpass=${env.WP_CONFIG_DB_PASS} --dbhost=${env.WP_CONFIG_DB_HOST} --extra-php=${env.WP_CONFIG_EXTRA} --path=${env.WP_PATH} --allow-root --skip-check --force" passthru="true" />
	</target>

	<!-- ============================================  -->
	<!-- Target: wpinstall                             -->
	<!-- ============================================  -->
	<target name="wp:install" depends="dotenv" description="Generate WordPress wp-config.php.">
		<echo msg="Install WordPress" />

		<exec command="./vendor/bin/wp core install --url=${env.WP_URL} --title=${env.WP_TITLE} --admin_user=${env.WP_ADMIN_USER} --admin_password=${env.WP_ADMIN_PASS} --admin_email=${env.WP_ADMIN_EMAIL} --path=${env.WP_PATH} --allow-root" passthru="true" checkreturn="true" />
	</target>

	<!-- ============================================  -->
	<!-- Target: wp:permalinks                         -->
	<!-- ============================================  -->
	<target name="wp:permalinks" depends="dotenv" description="Activate permalinks structure.">
		<echo msg="Activate permalinks" />

		<exec command="./vendor/bin/wp rewrite structure '/%postname%/' --path=${env.WP_PATH} --allow-root" passthru="true" checkreturn="true" />
	</target>

	<!-- ============================================  -->
	<!-- Target: wpplugins                             -->
	<!-- ============================================  -->
	<target name="wp:plugins" depends="dotenv" description="Activate installed plugins..">
		<echo msg="Activate plugins" />

		<exec command="./vendor/bin/wp plugin activate --all --path=${env.WP_PATH} --allow-root" passthru="true" checkreturn="true" />
	</target>

	<!-- ============================================  -->
	<!-- Target: wpplugins                             -->
	<!-- ============================================  -->
	<target name="wp:wc:update" depends="dotenv" description="Update WooCommerce database">
		<echo msg="Update WooCommerce database" />

		<exec command="./vendor/bin/wp wc update --path=${env.WP_PATH} --allow-root" passthru="true" checkreturn="true" />
	</target>

	<!-- ============================================  -->
	<!-- Target: wp:theme                              -->
	<!-- ============================================  -->
	<target name="wp:theme" depends="dotenv" description="Activate installed theme.">
		<echo msg="Activate theme" />

		<exec command="./vendor/bin/wp theme activate ${env.WP_THEME} --path=${env.WP_PATH} --allow-root" passthru="true" checkreturn="true" />
	</target>

	<!-- ============================================  -->
	<!-- Target: wp:options                            -->
	<!-- ============================================  -->
	<target name="wp:options" depends="dotenv" description="Set WordPress with default options. See build.xml file for details.">
		<echo msg="Set WordPress default options" />

		<!-- Remove WordPress blog description -->
		<exec command="./vendor/bin/wp option update 'blogdescription' '' --path=${env.WP_PATH} --allow-root" passthru="true" checkreturn="true" />

		<!-- Remove WordPress annoying notices -->
		<exec command="./vendor/bin/wp user meta update '1' 'show_try_gutenberg_panel' '0' --path=${env.WP_PATH} --allow-root" passthru="true" checkreturn="true" />
		<exec command="./vendor/bin/wp user meta update '1' 'show_welcome_panel' '0' --path=${env.WP_PATH} --allow-root" passthru="true" checkreturn="true" />

		<!-- Remove WooCommerce annoying notices -->
		<exec command="./vendor/bin/wp user meta update '1' 'dismissed_no_secure_connection_notice' '1' --path=${env.WP_PATH} --allow-root" passthru="true" checkreturn="true" />
		<exec command="./vendor/bin/wp user meta update '1' 'dismissed_install_notice' '1' --path=${env.WP_PATH} --allow-root" passthru="true" checkreturn="true" />
		<exec command="./vendor/bin/wp option update 'woocommerce_admin_notices' '{}' --format='json' --path=${env.WP_PATH} --allow-root" passthru="true" checkreturn="true" />

		<!-- Remove Storefront annoying notices -->


		<!-- Set WooCommerce settings -->
		<exec command="./vendor/bin/wp option update 'woocommerce_product_type' 'yes' --path=${env.WP_PATH} --allow-root" passthru="true" checkreturn="true" />
		<exec command="./vendor/bin/wp option update 'woocommerce_allow_tracking' 'no' --path=${env.WP_PATH} --allow-root" passthru="true" checkreturn="true" />
		<exec command="./vendor/bin/wp option update 'woocommerce_enable_reviews' 'no' --path=${env.WP_PATH} --allow-root" passthru="true" checkreturn="true" />

		<!-- Set default WooCommerce currency -->
		<exec command="./vendor/bin/wp option update 'woocommerce_currency' 'PLN' --path=${env.WP_PATH} --allow-root" passthru="true" checkreturn="true" />
		<exec command="./vendor/bin/wp option update 'woocommerce_currency_pos' 'right' --path=${env.WP_PATH} --allow-root" passthru="true" checkreturn="true" />
		<exec command="./vendor/bin/wp option update 'woocommerce_price_thousand_sep' ' ' --path=${env.WP_PATH} --allow-root" passthru="true" checkreturn="true" />
		<exec command="./vendor/bin/wp option update 'woocommerce_price_decimal_sep' ',' --path=${env.WP_PATH} --allow-root" passthru="true" checkreturn="true" />
		<exec command="./vendor/bin/wp option update 'woocommerce_price_num_decimals' '2' --path=${env.WP_PATH} --allow-root" passthru="true" checkreturn="true" />

		<exec command="./vendor/bin/wp option update 'woocommerce_ppec_paypal_settings' '{ &quot;reroute_requests&quot;: false, &quot;email&quot;: false }' --format='json' --path=${env.WP_PATH} --allow-root" passthru="true" checkreturn="true" />
		<exec command="./vendor/bin/wp option update 'woocommerce_cheque_settings' '{ &quot;enabled&quot;: &quot;no&quot; }' --format='json' --path=${env.WP_PATH} --allow-root" passthru="true" checkreturn="true" />
		<exec command="./vendor/bin/wp option update 'woocommerce_bacs_settings' '{ &quot;enabled&quot;: &quot;yes&quot;,  &quot;title&quot;: &quot;Bank transfer&quot; }' --format='json' --path=${env.WP_PATH} --allow-root" passthru="true" checkreturn="true" />
		<exec command="./vendor/bin/wp option update 'woocommerce_cod_settings' '{ &quot;enabled&quot;: &quot;no&quot; }' --format='json' --path=${env.WP_PATH} --allow-root" passthru="true" checkreturn="true" />
		<exec command="./vendor/bin/wp option update 'woocommerce_gateway_order' '[ &quot;bacs&quot;, &quot;cheque&quot;, &quot;cod&quot;, &quot;paypal&quot; ]' --format='json' --path=${env.WP_PATH} --allow-root" passthru="true" checkreturn="true" />
		<exec command="./vendor/bin/wp option update 'woocommerce_flat_rate_1_settings' '{ &quot;title&quot;: &quot;Flat rate&quot;, &quot;tax_status&quot;: &quot;taxable&quot;, &quot;cost&quot;: &quot;10&quot; }' --format='json' --path=${env.WP_PATH} --allow-root" passthru="true" checkreturn="true" />
		<exec command="./vendor/bin/wp option update 'woocommerce_flat_rate_2_settings' '{ &quot;title&quot;: &quot;Flat rate&quot;, &quot;tax_status&quot;: &quot;taxable&quot;, &quot;cost&quot;: &quot;50&quot; }' --format='json' --path=${env.WP_PATH} --allow-root" passthru="true" checkreturn="true" />

		<!-- Create shipping zone for Poland -->
		<exec command="./vendor/bin/wp wc shipping_zone create --name='Poland' --user=1 --path=${env.WP_PATH} --allow-root" passthru="true" checkreturn="true" />

		<!-- Assign Poland country to Polska shipping zone -->
		<exec command="./vendor/bin/wp db query 'INSERT INTO `wp_woocommerce_shipping_zone_locations` (`location_id`, `zone_id`, `location_code`, `location_type`) VALUES (1,1,&quot;PL&quot;,&quot;country&quot;);' --path=${env.WP_PATH} --allow-root" passthru="true" checkreturn="true" />

		<!-- Assign shipping methods to Polska shipping zone -->
		<exec command="./vendor/bin/wp db query 'INSERT INTO `wp_woocommerce_shipping_zone_methods` (`zone_id`, `instance_id`, `method_id`, `method_order`, `is_enabled`) VALUES (1,1,&quot;flat_rate&quot;,1,1), (0,2,&quot;flat_rate&quot;,1,1);' --path=${env.WP_PATH} --allow-root" passthru="true" checkreturn="true" />

		<!-- Create default pages for WooCommerce -->
		<exec command="./vendor/bin/wp wc tool run install_pages --user=1 --path=${env.WP_PATH} --allow-root" passthru="true" checkreturn="true" />

		<!-- Set full witdth template to Koszyk page -->
		<exec command="./vendor/bin/wp post update 5 --page_template='template-fullwidth.php' --user=1 --path=${env.WP_PATH} --allow-root" passthru="true" checkreturn="true" />

		<!-- Set full witdth template to Zamówienie page -->
		<exec command="./vendor/bin/wp post update 6 --page_template='template-fullwidth.php' --user=1 --path=${env.WP_PATH} --allow-root" passthru="true" checkreturn="true" />

		<!-- Set full witdth template to Moje Konto page -->
		<exec command="./vendor/bin/wp post update 7 --page_template='template-fullwidth.php' --user=1 --path=${env.WP_PATH} --allow-root" passthru="true" checkreturn="true" />

		<!-- Set WooCommerce registration settings -->
		<exec command="./vendor/bin/wp option update 'woocommerce_enable_signup_and_login_from_checkout' 'yes' --path=${env.WP_PATH} --allow-root" passthru="true" checkreturn="true" />
		<exec command="./vendor/bin/wp option update 'woocommerce_enable_myaccount_registration' 'yes' --path=${env.WP_PATH} --allow-root" passthru="true" checkreturn="true" />
		<exec command="./vendor/bin/wp option update 'woocommerce_registration_generate_password' 'no' --path=${env.WP_PATH} --allow-root" passthru="true" checkreturn="true" />

		<!-- Create terms & conditions page -->
		<exec command="./vendor/bin/wp post create --post_type=page --post_title='Terms and Conditions' --post_status='publish' --page_template='template-fullwidth.php' --porcelain --path=${env.WP_PATH} --allow-root" outputProperty="terms_and_conditions_page_id" checkreturn="true" />
		<exec command="./vendor/bin/wp option update 'woocommerce_terms_page_id' '${terms_and_conditions_page_id}' --path=${env.WP_PATH} --allow-root" passthru="true" checkreturn="true" />

		<!-- Home page -->
		<exec command="./vendor/bin/wp post create --post_type=page --post_title='Homepage' --post_status='publish' --page_template='template-homepage.php' --porcelain --path=${env.WP_PATH} --allow-root" outputProperty="home_page_id" checkreturn="true" />
		<exec command="./vendor/bin/wp option update 'show_on_front' 'page' --path=${env.WP_PATH} --allow-root" passthru="true" checkreturn="true" />
		<exec command="./vendor/bin/wp option update 'page_on_front' '${home_page_id}' --path=${env.WP_PATH} --allow-root" passthru="true" checkreturn="true" />

	</target>

	<!-- ============================================  -->
	<!-- Target: wp:init                               -->
	<!-- ============================================  -->
	<target name="wp:init" description="Initialize WordPress. Execute wp:config, wp:db:create, wp:install, wp:permalinks, wp:plugins.">
		<echo msg="Init WordPress" />

		<phingcall target="wp:config" />
		<phingcall target="wp:db:create" />
		<phingcall target="wp:install" />
		<phingcall target="wp:permalinks" />
		<phingcall target="wp:plugins" />
		<phingcall target="wp:wc:update" />
		<phingcall target="wp:theme" />
		<phingcall target="wp:options" />
	</target>

	<!-- ============================================  -->
	<!-- Target: wp:reset                              -->
	<!-- ============================================  -->
	<target name="wp:reset" description="Reset WordPress. Execute wp:config, wp:db:drop, wp:db:create, wp:install, wp:permalinks, wp:plugins.">
		<echo msg="Reset WordPress" />

		<phingcall target="wp:config" />
		<phingcall target="wp:db:drop" />
		<phingcall target="wp:db:create" />
		<phingcall target="wp:install" />
		<phingcall target="wp:permalinks" />
		<phingcall target="wp:plugins" />
		<phingcall target="wp:wc:update" />
		<phingcall target="wp:theme" />
		<phingcall target="wp:options" />
	</target>

	<!-- ============================================  -->
	<!-- Target: lint                                  -->
	<!-- ============================================  -->
	<target name="inspect:lint" description="Check possible syntax errors in php files using php -l command." depends="setup:symlink">
		<echo msg="Check possible syntax errors" />
		<exec command="for i in $(find . \( -path ./vendor -o -path ./wordpress \) -prune -o -name '*.php' -print); do php -l $i; done" passthru="true" checkreturn="true" />
	</target>

	<!-- ============================================  -->
	<!-- Target: inspect:phpcs:wp                      -->
	<!-- ============================================  -->
	<target name="inspect:phpcs:wp" description="Check posible code styling errors against WordPress rules in php files using phpcs comamnd." depends="setup:symlink">
		<echo msg="Check posible code styling errors against WordPress rules" />
		<exec command="./vendor/bin/phpcs  --extensions=php --standard=./rules/phpcs-wordpress.xml" passthru="true" checkreturn="true" />
	</target>

	<!-- ============================================  -->
	<!-- Target: inspect:phpcs:php56                   -->
	<!-- ============================================  -->
	<target name="inspect:phpcs:php56" description="Check posible code styling errors against PHP 5.6 compability in php files using phpcs comamnd." depends="setup:symlink">
		<echo msg="Check posible code styling errors against against PHP 5.6 compability" />
		<exec command="./vendor/bin/phpcs  --extensions=php --standard=./rules/phpcs-php56.xml" passthru="true" checkreturn="true" />
	</target>

	<!-- ============================================  -->
	<!-- Target: inspect:phpcs                         -->
	<!-- ============================================  -->
	<target name="inspect:phpcs" description="Check posible code styling errors in php files using phpcs comamnd." depends="setup:symlink">
		<echo msg="Check posible code styling errors" />

		<phingcall target="inspect:phpcs:wp" />
		<phingcall target="inspect:phpcs:php56" />
	</target>

	<!-- ============================================  -->
	<!-- Target: phpmd                                 -->
	<!-- ============================================  -->
	<!-- @TODO: phpmd don't want to work with self symlinks. Scan only inc directory for now. -->
	<target name="inspect:phpmd" description="Check posible mess in php files using phpmd comamnd." depends="setup:symlink">
		<echo msg="Check posible mess" />
		<exec command="./vendor/bin/phpmd ./inc text ./rules/phpmd.xml" passthru="true" checkreturn="false" />
	</target>

	<!-- ============================================  -->
	<!-- Target: phpcpd                                -->
	<!-- ============================================  -->
	<target name="inspect:phpcpd" description="Check posible duplicates in php files using phpcpd comamnd." depends="setup:symlink">
		<echo msg="Check posible duplicates" />
		<exec command="./vendor/bin/phpcpd ./ --exclude vendor --exclude wordpress" passthru="true" checkreturn="false" />
	</target>

	<!-- ============================================  -->
	<!-- Target: phpcbf                                -->
	<!-- ============================================  -->
	<target name="inspect:fix" description="Auto fix code styling errors in php files using phpcbf comamnd." depends="setup:symlink">
		<echo msg="Auto fix code styling errors" />
		<exec command="./vendor/bin/phpcbf  --extensions=php --standard=./rules/phpcs-wordpress.xml" passthru="true" checkreturn="true" />
	</target>

	<target name="inspect" description="Inspect php code. Execute inspect:lint, inspect:phpcs, inspect:phpcpd, inspect:phpmd." depends="inspect:lint, inspect:phpcs, inspect:phpcpd, inspect:phpmd">
	</target>

	<!-- ============================================  -->
	<!-- Target: tests:phpunit						   -->
	<!-- ============================================  -->
	<target name="tests:phpunit" depends="dotenv" description="Execute tests using phpunit">
		<echo msg="Execute tests" />
		<exec command="./vendor/bin/phpunit --configuration phpunit.xml" passthru="true" checkreturn="true" />
	</target>

	<!-- ============================================  -->
	<!-- Target: tests                                 -->
	<!-- ============================================  -->
	<target name="tests" depends="dotenv, tests:phpunit" description="Execute unit tests. Execute tests:phpunit." />

	<!-- ============================================  -->
	<!-- Target: build:clean                           -->
	<!-- ============================================  -->
	<target name="build:clean" description="Clean build directories.">

		<echo msg="Clean build" />

		<!-- Clean build directory -->
		<delete dir="${project.basedir}/build/git" quiet="true" />
		<delete dir="${project.basedir}/build/svn" quiet="true" />
		<delete dir="${project.basedir}/build/dist" quiet="true" />
		<delete dir="${project.basedir}/build/archives" quiet="true" />

	</target>

	<!-- ============================================  -->
	<!-- Target: build:clone                           -->
	<!-- ============================================  -->
	<target name="build:clone" description="Clone repository to seperate directory.">

		<echo msg="Create required directories" />

		<mkdir dir="${project.basedir}/build" />
		<mkdir dir="${project.basedir}/build/git" />

		<echo msg="Clone repository" />
		<exec command="git clone ${repository} ${project.basedir}/build/git" passthru="true" checkreturn="true" />

	</target>

	<!-- ============================================  -->
	<!-- Target: build                                 -->
	<!-- ============================================  -->
	<target name="build:install" description="Install project dependencies.">

		<echo msg="Install composer dependencies" />
		<exec command="composer install --no-dev --no-scripts --working-dir=${project.basedir}/build/git" passthru="true" checkreturn="true" />

		<echo msg="Install node dependencies" />
		<exec command="cd ${project.basedir}/build/git; yarn install" passthru="true" checkreturn="true" />

	</target>

	<!-- ============================================  -->
	<!-- Target: build:assets                          -->
	<!-- ============================================  -->
	<target name="build:assets" description="Build projects assets.">

		<echo msg="Build assets" />
		<exec command="cd ${project.basedir}/build/git; yarn build:prod" passthru="true" checkreturn="true" />

	</target>

	<!-- ============================================  -->
	<!-- Target: build:archive                         -->
	<!-- ============================================  -->
	<target name="build:archive" depends="dotenv" description="Create archives with production ready plugin files.">

		<echo msg="Create required directories" />

		<mkdir dir="${project.basedir}/build/dist" />
		<mkdir dir="${project.basedir}/build/archives" />

		<echo msg="Sync files with rsync excluding files from .distignore" />
		<exec command="rsync -r --exclude-from .distignore ${project.basedir}/build/git/ ${project.basedir}/build/dist" passthru="true" checkreturn="true" />

		<echo msg="Create archives" />
		<exec command="tar -czf ${project.basedir}/build/archives/${plugin}.tar.gz -C ${project.basedir}/build/dist ." passthru="true" checkreturn="true" />
		<exec command="cd ${project.basedir}/build/dist; zip -r ${project.basedir}/build/archives/${plugin}.zip *" passthru="true" checkreturn="true" />

	</target>

	<!-- ============================================  -->
	<!-- Target: build                                 -->
	<!-- ============================================  -->
	<target name="build" description="Build plugin and create archive. Execute build:clean, build:clone, build:install, build:assets, build:archive.">

		<echo msg="Full build" />

		<phingcall target="build:clean" />
		<phingcall target="build:clone" />
		<phingcall target="build:install" />
		<phingcall target="build:assets" />
		<phingcall target="build:archive" />
	</target>

	<!-- ============================================  -->
	<!-- Target: bump:prerelease                       -->
	<!-- ============================================  -->
	<target name="bump:prerelease" description="Bump prerelease version in packages.json, composer.json and ignico.php files.">

		<echo msg="Bumping version in packages.json, composer.json and ignico.php files." />

		<exec command="npm run bump:prerelease" passthru="true" checkreturn="true" />
	</target>

	<!-- ============================================  -->
	<!-- Target: bump:patch                            -->
	<!-- ============================================  -->
	<target name="bump:patch" description="Bump patch version in packages.json, composer.json and ignico.php files.">

		<echo msg="Bumping version in packages.json, composer.json and ignico.php files." />

		<exec command="npm run bump:patch" passthru="true" checkreturn="true" />
	</target>

	<!-- ============================================  -->
	<!-- Target: bump:minor                            -->
	<!-- ============================================  -->
	<target name="bump:minor" description="Bump minor version in packages.json, composer.json and ignico.php files.">

		<echo msg="Bumping version in packages.json, composer.json and ignico.php files." />

		<exec command="npm run bump:minor" passthru="true" checkreturn="true" />
	</target>

	<!-- ============================================  -->
	<!-- Target: bump:major                            -->
	<!-- ============================================  -->
	<target name="bump:major" description="Bump major version in packages.json, composer.json and ignico.php files.">

		<echo msg="Bumping version in packages.json, composer.json and ignico.php files." />

		<exec command="npm run bump:major" passthru="true" checkreturn="true" />
	</target>

	<!-- ============================================  -->
	<!-- Target: changelog                             -->
	<!-- ============================================  -->
	<target name="changelog" description="Generate changelog based on commits.">

		<echo msg="Generate changelog based on commits." />

		<exec command="./node_modules/.bin/conventional-changelog -p angular -i CHANGELOG.md -s -r 0" />
	</target>

	<!-- ============================================  -->
	<!-- Target: deploy:wp                             -->
	<!-- ============================================  -->
	<target name="deploy:wp" description="Synchronize git repository with WordPress plugin svn repository.">

		<echo msg="Synchronize git repository with WordPress plugin svn repository" />

		<phingcall target="build:clean" />
		<phingcall target="build:clone" />
		<exec command="./bin/sync.sh --plugin-name=ignico --svn-user=ignico --after-git-checkout='./vendor/bin/phing build:install build:assets'" passthru="true" checkreturn="true" />
	</target>

</project>
